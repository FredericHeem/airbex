#!/usr/bin/env node
var fs = require('fs')
, Table = require('cli-table')
, async = require('async')
, optimist = require('optimist')
, argv = optimist
.usage([
    'Access to Snow',
    'Usage:',
    'snow APIKEY               Write API key to config',
    'snow url <url>            Write endpoint to config (debugging)',
    'snow whoami               Show user information',
    'snow showall              Show user information, balances, orders and transaction',
    'snow balances             List balances',
    'snow markets              List markets',
    'snow orders               List my orders',
    'snow depth <market>       List order depth. Example: snow depth BTCXRP',
    'snow cancel <order id>    Cancel exchange order',
    'snow cancelAll            Cancel all orders'
].join('\n'))
.describe('u', 'API url to use')
.describe('k', 'API key to use')
.alias('u', 'url')
.alias('k', 'key')
.argv
, method = argv._[0]
, path = require('path')
if (!method) return usage()

function usage() {
    optimist.showHelp()
}

var configFn = path.join(__dirname, '../settings.json')
, config = fs.existsSync(configFn) ? require(configFn) : {}

if (method.length == 64) {
    config.key = method
    fs.writeFileSync(configFn, JSON.stringify(config, null, 4))
    return console.log('API key %s written to configuration', method)
}

if (method == 'url') {
    config.url = argv._[1]
    fs.writeFileSync(configFn, JSON.stringify(config, null, 4))
    if (config.url) console.log('API url %s written to configuration', config.url)
    else console.log('API url removed from configuration')
    return
}

if (argv.url) config.url = argv.url
if (argv.key) config.key = argv.key

function demandApiKey() {
    console.error('API key not set\n')
    usage()
}

var client = new (require('../index'))(config)

if (method == 'showall') {
    return async.series([function (callback) {
        client.whoami(function(err, user) {
            if (err) throw err
            console.log(client.createTableUser(user).toString())
            callback()
        })
    }, function (callback) {
        client.balances(function(err, balances) {
            if (err) throw err
            console.log(client.createTableBalances(balances).toString())
            callback()
        })
    }, function (callback) {
        client.orders(function(err, orders) {
            if (err) throw err
            console.log(client.createTableOrders(orders).toString())
            callback()
        })
    }, function (callback) {
        client.markets(function(err, markets) {
            if (err) throw err
            console.log(client.createTableMarkets(markets).toString())
            callback()
        })
    }], function(err) {
        if (err) throw err
    });
}

if (method == 'whoami') {
    return client.whoami(function(err, user) {
        if (err) throw err
        console.log(client.createTableUser(user).toString())
    })
}

if (method == 'balances') {
    return client.balances(function(err, balances) {
        if (err) throw err
        console.log(client.createTableBalances(balances).toString())
    })
}

if (method == 'orders') {
    return client.orders(function(err, orders) {
        if (err) throw err
        console.log(client.createTableOrders(orders).toString())
    })
}

if (method == 'markets') {
    return client.markets(function(err, markets) {
        if (err) throw err
        console.log(client.createTableMarkets(markets).toString())
    })
}

if (method == 'depth') {
    var market = argv._[1]
    if (!market) return usage()
    return client.depth(market, function(err, depth) {
        if (err) throw err
        var table = new Table({
            head: [
                'Bid volume',
                'Price per',
                'Ask volume'
            ],
            colWidths: [18, 18, 18]
        })

        depth.forEach(function(row) {
            table.push([
                row.type == 'bid' ? row.volume + ' ' + market.substr(0, 3) : '',
                row.price + ' ' + market.substr(3),
                row.type == 'ask' ? row.volume + ' ' + market.substr(0, 3) : ''
            ])
        })

        console.log(table.toString())
    })
}

if (method == 'cancel') {
    if  (!argv._[1]) return usage()
    if (!config.key) return demandApiKey()
    return client.cancel(+argv._[1], function(err) {
        if (err) throw err
        console.log('Order #%s cancelled', argv._[1])
    })
}

if (method == 'cancelAll') {
    if (!config.key) return demandApiKey()
    return client.cancelAll(function(err, orderCancelled) {
        if (err) throw err
        console.log('#order cancelled %d', orderCancelled)
    })
}

if (method == 'bid' || method == 'ask') {
    if (argv._.length != 5) return usage()
    if (!config.key) return demandApiKey()
    return client.order({
        market: argv._[2].toUpperCase() + argv._[4].toUpperCase(),
        type: method,
        price: argv._[3] + '',
        amount: argv._[1] + ''
    }, function(err, id) {
        if (err) throw err
        console.log('Order #%s placed', id)
    })
}

usage()
